Synk is an application event synchronization service. Client applications
POST events to Synk, and can later GET them in return. Synk is not intended
for applications to synchronize large amounts of data; it is better suited
to managing small bits of data which can be used to keep two clients in
sync with one another.

For example, the Vienna RSS reader project uses Synk to synchronize the
following events among multiple computers:

* each time an article is marked as read or unread
* each time an article is marked with a flag
* each time the user opens a new browser tab or clicks a link in the browser

Synk uses JSON for all communication.

= The API =

Synk accepts GET and POST requests. It does not respond to DELETE, PUT, or
other HTTP methods.

Synk API requests must be authenticated using HTTP Digest Authentication.
Clients should store user passwords securely (e.g. in OS X's Keychain) or
should prompt the user for password before each request and not save the
password between requests.

GET /events/{service}
GET /events/{service}/{type}
GET /events/{service}/since/{timestamp}
GET /events/{service}/{type}/since/{timestamp}

Return a list of events matching the filters, as JSON. {service} is a short
string identifying a Synk service (e.g. "rss"). {type} is a short string
identifying a sub-type within the scope of a service. The returned lists can
be filtered to include only events logged since {timestamp}.

Each item in the output will contain at least the following fields:

* "timestamp", an integer (see below)
* "service", the name of the service the event belongs to
* "type", the name of the type the event belongs to


POST /events/{service}/{type}

Add events to Synk. POST body must conform to this JSON "shcema":

[
  {"timestamp": timestamp, ...},
  ...
]

The POST body must contain a JSON string describing an array, and each array
element must be an object. Each object must contain a "timestamp" field,
which is the UNIX timestamp (seconds since Jan 1, 1970 12:00am UTC) of the
time the event was generated on the client.

Each item may contain any other key/value pairs, except keys "service" or
"type". The length of each item must not exceed approximately 2048 bytes,
including the length of key names and values.

The length is computed as the string length of a Python pickle serialization
of a Python dictionary containing all the item's data except the 'timestamp'
key, as:

    # data is the dict representing one item in the POST body
    del data['timestamp']
    if len(pickle.dumps(data)) > 2048:
        raise Exception('item exceeds 2048 bytes of data')

If any element in the POST body does not validate, the entire POST body is
rejected, and an error response is returned (with status code 500), with a
message in the following format:

  {"error": true, "message": "Invalid JSON Schema", "detail": "..."}

The detail field will indicate which item had an error, and the nature of
the error; or, if the JSON could not be parsed, it will contain an error
message from the simplejson module.

= License =

Synk is distributed under a BSD-like license (see LICENSE in the source code
root directory). Source code for Synk is available on GitHub at
http://github.com/dcrosta/synk/tree/master.

